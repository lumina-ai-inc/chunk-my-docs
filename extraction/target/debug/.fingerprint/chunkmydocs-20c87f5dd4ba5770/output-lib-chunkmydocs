{"$message_type":"diagnostic","message":"the trait bound `ApiRequest: FromRequest` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":2346,"byte_end":2348,"line_start":60,"line_end":60,"column_start":55,"column_end":57,"is_primary":true,"text":[{"text":"                .route(\"/create_api_key\", web::post().to(create_api_key))","highlight_start":55,"highlight_end":57}],"label":"the trait `FromRequest` is not implemented for `ApiRequest`, which is required by `(_, _): FromRequest`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `FromRequest`:\n  ()\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 30 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `(ApiRequest, &deadpool::managed::Pool<deadpool_postgres::Manager>)` to implement `FromRequest`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Route::to`","code":null,"level":"note","spans":[{"file_name":"/Users/ishaankapoor/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/route.rs","byte_start":6089,"byte_end":6091,"line_start":210,"line_end":210,"column_start":12,"column_end":14,"is_primary":false,"text":[{"text":"    pub fn to<F, Args>(mut self, handler: F) -> Self","highlight_start":12,"highlight_end":14}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ishaankapoor/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/route.rs","byte_start":6181,"byte_end":6192,"line_start":213,"line_end":213,"column_start":15,"column_end":26,"is_primary":true,"text":[{"text":"        Args: FromRequest + 'static,","highlight_start":15,"highlight_end":26}],"label":"required by this bound in `Route::to`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `ApiRequest: FromRequest` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:60:55\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                .route(\"/create_api_key\", web::post().to(create_api_key))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `FromRequest` is not implemented for `ApiRequest`, which is required by `(_, _): FromRequest`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `FromRequest`:\u001b[0m\n\u001b[0m              ()\u001b[0m\n\u001b[0m              (A, B)\u001b[0m\n\u001b[0m              (A, B, C)\u001b[0m\n\u001b[0m              (A, B, C, D)\u001b[0m\n\u001b[0m              (A, B, C, D, E)\u001b[0m\n\u001b[0m              (A, B, C, D, E, F)\u001b[0m\n\u001b[0m              (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m              (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m            and 30 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `(ApiRequest, &deadpool::managed::Pool<deadpool_postgres::Manager>)` to implement `FromRequest`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Route::to`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ishaankapoor/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/route.rs:213:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn to<F, Args>(mut self, handler: F) -> Self\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m213\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Args: FromRequest + 'static,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Route::to`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `&deadpool::managed::Pool<deadpool_postgres::Manager>: FromRequest` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":2346,"byte_end":2348,"line_start":60,"line_end":60,"column_start":55,"column_end":57,"is_primary":true,"text":[{"text":"                .route(\"/create_api_key\", web::post().to(create_api_key))","highlight_start":55,"highlight_end":57}],"label":"the trait `FromRequest` is not implemented for `&deadpool::managed::Pool<deadpool_postgres::Manager>`, which is required by `(_, _): FromRequest`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `FromRequest`:\n  ()\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\nand 30 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `(ApiRequest, &deadpool::managed::Pool<deadpool_postgres::Manager>)` to implement `FromRequest`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Route::to`","code":null,"level":"note","spans":[{"file_name":"/Users/ishaankapoor/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/route.rs","byte_start":6089,"byte_end":6091,"line_start":210,"line_end":210,"column_start":12,"column_end":14,"is_primary":false,"text":[{"text":"    pub fn to<F, Args>(mut self, handler: F) -> Self","highlight_start":12,"highlight_end":14}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ishaankapoor/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/route.rs","byte_start":6181,"byte_end":6192,"line_start":213,"line_end":213,"column_start":15,"column_end":26,"is_primary":true,"text":[{"text":"        Args: FromRequest + 'static,","highlight_start":15,"highlight_end":26}],"label":"required by this bound in `Route::to`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `&deadpool::managed::Pool<deadpool_postgres::Manager>: FromRequest` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:60:55\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                .route(\"/create_api_key\", web::post().to(create_api_key))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `FromRequest` is not implemented for `&deadpool::managed::Pool<deadpool_postgres::Manager>`, which is required by `(_, _): FromRequest`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `FromRequest`:\u001b[0m\n\u001b[0m              ()\u001b[0m\n\u001b[0m              (A, B)\u001b[0m\n\u001b[0m              (A, B, C)\u001b[0m\n\u001b[0m              (A, B, C, D)\u001b[0m\n\u001b[0m              (A, B, C, D, E)\u001b[0m\n\u001b[0m              (A, B, C, D, E, F)\u001b[0m\n\u001b[0m              (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m              (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m            and 30 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `(ApiRequest, &deadpool::managed::Pool<deadpool_postgres::Manager>)` to implement `FromRequest`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Route::to`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ishaankapoor/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/route.rs:213:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn to<F, Args>(mut self, handler: F) -> Self\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m213\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Args: FromRequest + 'static,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Route::to`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
