{
    "sourceFile": "extraction/src/routes/task.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1724530879732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724530886263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,16 +8,14 @@\n     task_id: web::Path<String>,\n     req: HttpRequest,\n ) -> Result<HttpResponse, Error> {\n     let task_id = task_id.into_inner();\n-    \n+\n     // Validate task_id as UUID\n     if Uuid::parse_str(&task_id).is_err() {\n         return Ok(HttpResponse::BadRequest().body(\"Invalid task ID format\"));\n     }\n \n-    println!(\"Got task status\");\n-\n     match get_task(&pool, task_id).await {\n         Ok(task_response) => Ok(HttpResponse::Ok().json(task_response)),\n         Err(e) => {\n             eprintln!(\"Error getting task status: {:?}\", e);\n"
                },
                {
                    "date": 1724530988529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n use crate::lib::get_task::get_task;\n use actix_web::{web, Error, HttpRequest, HttpResponse};\n-use shared::deadpool_postgres::Pool;\n+use utils::deadpool_postgres::Pool;\n use uuid::Uuid;\n \n pub async fn get_task_status(\n     pool: web::Data<Pool>,\n"
                },
                {
                    "date": 1724531765538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n use crate::lib::get_task::get_task;\n use actix_web::{web, Error, HttpRequest, HttpResponse};\n-use utils::deadpool_postgres::Pool;\n+use crate::utils::deadpool_postgres::Pool;\n use uuid::Uuid;\n \n pub async fn get_task_status(\n     pool: web::Data<Pool>,\n"
                },
                {
                    "date": 1724531771019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n+use actix_web::{web, Error, HttpRequest, HttpResponse};\n+use uuid::Uuid;\n use crate::lib::get_task::get_task;\n-use actix_web::{web, Error, HttpRequest, HttpResponse};\n use crate::utils::deadpool_postgres::Pool;\n-use uuid::Uuid;\n \n pub async fn get_task_status(\n     pool: web::Data<Pool>,\n     task_id: web::Path<String>,\n"
                },
                {
                    "date": 1724533462425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n use actix_web::{web, Error, HttpRequest, HttpResponse};\n use uuid::Uuid;\n-use crate::lib::get_task::get_task;\n+use crate::utils::server::get_task::get_task;\n use crate::utils::deadpool_postgres::Pool;\n \n pub async fn get_task_status(\n     pool: web::Data<Pool>,\n"
                }
            ],
            "date": 1724530879731,
            "name": "Commit-0",
            "content": "use crate::lib::get_task::get_task;\nuse actix_web::{web, Error, HttpRequest, HttpResponse};\nuse shared::deadpool_postgres::Pool;\nuse uuid::Uuid;\n\npub async fn get_task_status(\n    pool: web::Data<Pool>,\n    task_id: web::Path<String>,\n    req: HttpRequest,\n) -> Result<HttpResponse, Error> {\n    let task_id = task_id.into_inner();\n    \n    // Validate task_id as UUID\n    if Uuid::parse_str(&task_id).is_err() {\n        return Ok(HttpResponse::BadRequest().body(\"Invalid task ID format\"));\n    }\n\n    println!(\"Got task status\");\n\n    match get_task(&pool, task_id).await {\n        Ok(task_response) => Ok(HttpResponse::Ok().json(task_response)),\n        Err(e) => {\n            eprintln!(\"Error getting task status: {:?}\", e);\n            Ok(HttpResponse::InternalServerError().body(e.to_string()))\n        }\n    }\n}\n"
        }
    ]
}