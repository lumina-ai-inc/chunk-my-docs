{
    "sourceFile": "extraction/src/middleware/api_key.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1724531655225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724531688362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,10 @@\n     HttpMessage,\n     web,\n };\n use futures_util::future::LocalBoxFuture;\n-use shared::deadpool_postgres::{ Pool, Client };\n use std::rc::Rc;\n+use crate::utils::deadpool_postgres::{ Pool, Client };\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct ApiInfo {\n     pub api_key: String,\n"
                },
                {
                    "date": 1724531698241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,14 +8,10 @@\n use futures_util::future::LocalBoxFuture;\n use std::rc::Rc;\n use crate::utils::deadpool_postgres::{ Pool, Client };\n \n-#[derive(Clone, Debug, PartialEq, Eq)]\n-pub struct ApiInfo {\n-    pub api_key: String,\n-    pub user_id: String,\n-}\n \n+\n pub struct ApiKeyMiddlewareFactory;\n \n impl<S, B> Transform<S, ServiceRequest>\n     for ApiKeyMiddlewareFactory\n"
                },
                {
                    "date": 1724531723860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,10 @@\n };\n use futures_util::future::LocalBoxFuture;\n use std::rc::Rc;\n use crate::utils::deadpool_postgres::{ Pool, Client };\n+use crate::models::api::ApiInfo;\n \n-\n-\n pub struct ApiKeyMiddlewareFactory;\n \n impl<S, B> Transform<S, ServiceRequest>\n     for ApiKeyMiddlewareFactory\n"
                },
                {
                    "date": 1724533504128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n };\n use futures_util::future::LocalBoxFuture;\n use std::rc::Rc;\n use crate::utils::deadpool_postgres::{ Pool, Client };\n-use crate::models::api::ApiInfo;\n+use crate::models::extraction::api::ApiInfo;\n \n pub struct ApiKeyMiddlewareFactory;\n \n impl<S, B> Transform<S, ServiceRequest>\n"
                },
                {
                    "date": 1724533521549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n     web,\n };\n use futures_util::future::LocalBoxFuture;\n use std::rc::Rc;\n-use crate::utils::deadpool_postgres::{ Pool, Client };\n+use crate::utils::db::deadpool_postgres::{ Pool, Client };\n use crate::models::extraction::api::ApiInfo;\n \n pub struct ApiKeyMiddlewareFactory;\n \n"
                },
                {
                    "date": 1724533627475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,10 @@\n     web,\n };\n use futures_util::future::LocalBoxFuture;\n use std::rc::Rc;\n-use crate::utils::db::deadpool_postgres::{ Pool, Client };\n-use crate::models::extraction::api::ApiInfo;\n+use  utils::db::deadpool_postgres::{ Pool, Client };\n+use models::extraction::api::ApiInfo;\n \n pub struct ApiKeyMiddlewareFactory;\n \n impl<S, B> Transform<S, ServiceRequest>\n"
                },
                {
                    "date": 1724533648694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n     web,\n };\n use futures_util::future::LocalBoxFuture;\n use std::rc::Rc;\n-use  utils::db::deadpool_postgres::{ Pool, Client };\n+use utils::db::deadpool_postgres::{ Pool, Client };\n use models::extraction::api::ApiInfo;\n \n pub struct ApiKeyMiddlewareFactory;\n \n@@ -33,17 +33,18 @@\n         )\n     }\n }\n \n-pub struct ApiKeyMiddleware<S>{\n+pub struct ApiKeyMiddleware<S> {\n     service: Rc<S>,\n }\n \n-impl<S, B> Service<ServiceRequest> for ApiKeyMiddleware<S>\n-where\n-    S: Service<ServiceRequest, Response = ServiceResponse<B>, Error = Error> + 'static,\n-    S::Future: 'static,\n-    B: 'static,\n+impl<S, B> Service<ServiceRequest>\n+    for ApiKeyMiddleware<S>\n+    where\n+        S: Service<ServiceRequest, Response = ServiceResponse<B>, Error = Error> + 'static,\n+        S::Future: 'static,\n+        B: 'static\n {\n     type Response = ServiceResponse<B>;\n     type Error = Error;\n     type Future = LocalBoxFuture<'static, Result<Self::Response, Self::Error>>;\n"
                },
                {
                    "date": 1724534113373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n     web,\n };\n use futures_util::future::LocalBoxFuture;\n use std::rc::Rc;\n-use utils::db::deadpool_postgres::{ Pool, Client };\n+use utils::db::deadpool_postgres::{ Pool, Client }; \n use models::extraction::api::ApiInfo;\n \n pub struct ApiKeyMiddlewareFactory;\n \n"
                },
                {
                    "date": 1724537234431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,50 +1,44 @@\n-use std::future::{ ready, Ready };\n+use crate::models::extraction::api::ApiInfo;\n+use crate::utils::db::deadpool_postgres::{Client, Pool};\n use actix_web::{\n-    dev::{ forward_ready, Service, ServiceRequest, ServiceResponse, Transform },\n-    Error,\n-    HttpMessage,\n-    web,\n+    dev::{forward_ready, Service, ServiceRequest, ServiceResponse, Transform},\n+    web, Error, HttpMessage,\n };\n use futures_util::future::LocalBoxFuture;\n+use std::future::{ready, Ready};\n use std::rc::Rc;\n-use utils::db::deadpool_postgres::{ Pool, Client }; \n-use models::extraction::api::ApiInfo;\n \n pub struct ApiKeyMiddlewareFactory;\n \n-impl<S, B> Transform<S, ServiceRequest>\n-    for ApiKeyMiddlewareFactory\n-    where\n-        S: Service<ServiceRequest, Response = ServiceResponse<B>, Error = Error> + 'static,\n-        S::Future: 'static,\n-        B: 'static\n+impl<S, B> Transform<S, ServiceRequest> for ApiKeyMiddlewareFactory\n+where\n+    S: Service<ServiceRequest, Response = ServiceResponse<B>, Error = Error> + 'static,\n+    S::Future: 'static,\n+    B: 'static,\n {\n     type Response = ServiceResponse<B>;\n     type Error = Error;\n     type InitError = ();\n     type Transform = ApiKeyMiddleware<S>;\n     type Future = Ready<Result<Self::Transform, Self::InitError>>;\n \n     fn new_transform(&self, service: S) -> Self::Future {\n-        ready(\n-            Ok(ApiKeyMiddleware {\n-                service: Rc::new(service),\n-            })\n-        )\n+        ready(Ok(ApiKeyMiddleware {\n+            service: Rc::new(service),\n+        }))\n     }\n }\n \n pub struct ApiKeyMiddleware<S> {\n     service: Rc<S>,\n }\n \n-impl<S, B> Service<ServiceRequest>\n-    for ApiKeyMiddleware<S>\n-    where\n-        S: Service<ServiceRequest, Response = ServiceResponse<B>, Error = Error> + 'static,\n-        S::Future: 'static,\n-        B: 'static\n+impl<S, B> Service<ServiceRequest> for ApiKeyMiddleware<S>\n+where\n+    S: Service<ServiceRequest, Response = ServiceResponse<B>, Error = Error> + 'static,\n+    S::Future: 'static,\n+    B: 'static,\n {\n     type Response = ServiceResponse<B>;\n     type Error = Error;\n     type Future = LocalBoxFuture<'static, Result<Self::Response, Self::Error>>;\n@@ -60,25 +54,29 @@\n                 .get(\"x-api-key\")\n                 .and_then(|value| value.to_str().ok());\n \n             if api_key.is_none() {\n-                return Err(Error::from(actix_web::error::ErrorUnauthorized(\"API key is missing\")));\n+                return Err(Error::from(actix_web::error::ErrorUnauthorized(\n+                    \"API key is missing\",\n+                )));\n             }\n \n             let pool = match req.app_data::<web::Data<Pool>>() {\n                 Some(pool) => pool.clone(),\n                 None => {\n                     println!(\"Database pool not found\");\n-                    return Err(\n-                        actix_web::error::ErrorInternalServerError(\"Database pool not found\")\n-                    );\n+                    return Err(actix_web::error::ErrorInternalServerError(\n+                        \"Database pool not found\",\n+                    ));\n                 }\n             };\n             let client = match pool.get().await {\n                 Ok(client) => client,\n                 Err(e) => {\n                     eprintln!(\"Error getting Postgres client from pool: {:?}\", e);\n-                    return Err(actix_web::error::ErrorInternalServerError(\"Failed to get client\"));\n+                    return Err(actix_web::error::ErrorInternalServerError(\n+                        \"Failed to get client\",\n+                    ));\n                 }\n             };\n \n             match validator(api_key.unwrap_or_default(), client).await {\n@@ -100,27 +98,32 @@\n         return Err(actix_web::error::ErrorUnauthorized(\"API key is missing\"));\n     }\n \n     // Query the database for the API key\n-    let row = match\n-        client.query_opt(\n+    let row = match client\n+        .query_opt(\n             \"SELECT user_id FROM API_KEYS WHERE key = $1 AND active = true AND deleted = false\",\n-            &[&api_key]\n-        ).await\n+            &[&api_key],\n+        )\n+        .await\n     {\n         Ok(row) => row,\n         Err(e) => {\n             eprintln!(\"Error querying API key: {:?}\", e);\n-            return Err(actix_web::error::ErrorInternalServerError(\"Failed to find API key\"));\n+            return Err(actix_web::error::ErrorInternalServerError(\n+                \"Failed to find API key\",\n+            ));\n         }\n     };\n \n     // Check if the API key is valid and retrieve the user_id\n     let user_id = match row {\n         Some(row) => row.get::<_, String>(\"user_id\"),\n         None => {\n             eprintln!(\"Error: Invalid or inactive API key\");\n-            return Err(actix_web::error::ErrorUnauthorized(\"Invalid or inactive API key\"));\n+            return Err(actix_web::error::ErrorUnauthorized(\n+                \"Invalid or inactive API key\",\n+            ));\n         }\n     };\n \n     // Attach the user_id to the request\n"
                }
            ],
            "date": 1724531655225,
            "name": "Commit-0",
            "content": "use std::future::{ ready, Ready };\nuse actix_web::{\n    dev::{ forward_ready, Service, ServiceRequest, ServiceResponse, Transform },\n    Error,\n    HttpMessage,\n    web,\n};\nuse futures_util::future::LocalBoxFuture;\nuse shared::deadpool_postgres::{ Pool, Client };\nuse std::rc::Rc;\n\n#[derive(Clone, Debug, PartialEq, Eq)]\npub struct ApiInfo {\n    pub api_key: String,\n    pub user_id: String,\n}\n\npub struct ApiKeyMiddlewareFactory;\n\nimpl<S, B> Transform<S, ServiceRequest>\n    for ApiKeyMiddlewareFactory\n    where\n        S: Service<ServiceRequest, Response = ServiceResponse<B>, Error = Error> + 'static,\n        S::Future: 'static,\n        B: 'static\n{\n    type Response = ServiceResponse<B>;\n    type Error = Error;\n    type InitError = ();\n    type Transform = ApiKeyMiddleware<S>;\n    type Future = Ready<Result<Self::Transform, Self::InitError>>;\n\n    fn new_transform(&self, service: S) -> Self::Future {\n        ready(\n            Ok(ApiKeyMiddleware {\n                service: Rc::new(service),\n            })\n        )\n    }\n}\n\npub struct ApiKeyMiddleware<S>{\n    service: Rc<S>,\n}\n\nimpl<S, B> Service<ServiceRequest> for ApiKeyMiddleware<S>\nwhere\n    S: Service<ServiceRequest, Response = ServiceResponse<B>, Error = Error> + 'static,\n    S::Future: 'static,\n    B: 'static,\n{\n    type Response = ServiceResponse<B>;\n    type Error = Error;\n    type Future = LocalBoxFuture<'static, Result<Self::Response, Self::Error>>;\n\n    forward_ready!(service);\n\n    fn call(&self, mut req: ServiceRequest) -> Self::Future {\n        let srv = self.service.clone();\n\n        Box::pin(async move {\n            let api_key = req\n                .headers()\n                .get(\"x-api-key\")\n                .and_then(|value| value.to_str().ok());\n\n            if api_key.is_none() {\n                return Err(Error::from(actix_web::error::ErrorUnauthorized(\"API key is missing\")));\n            }\n\n            let pool = match req.app_data::<web::Data<Pool>>() {\n                Some(pool) => pool.clone(),\n                None => {\n                    println!(\"Database pool not found\");\n                    return Err(\n                        actix_web::error::ErrorInternalServerError(\"Database pool not found\")\n                    );\n                }\n            };\n            let client = match pool.get().await {\n                Ok(client) => client,\n                Err(e) => {\n                    eprintln!(\"Error getting Postgres client from pool: {:?}\", e);\n                    return Err(actix_web::error::ErrorInternalServerError(\"Failed to get client\"));\n                }\n            };\n\n            match validator(api_key.unwrap_or_default(), client).await {\n                Ok(api_info) => {\n                    req.extensions_mut().insert(api_info);\n                    let res = srv.call(req).await?;\n                    Ok(res)\n                }\n                Err(e) => Err(e),\n            }\n        })\n    }\n}\n\nasync fn validator(api_key: &str, client: Client) -> Result<ApiInfo, Error> {\n    println!(\"Api key: {}\", api_key);\n\n    if api_key.is_empty() {\n        return Err(actix_web::error::ErrorUnauthorized(\"API key is missing\"));\n    }\n\n    // Query the database for the API key\n    let row = match\n        client.query_opt(\n            \"SELECT user_id FROM API_KEYS WHERE key = $1 AND active = true AND deleted = false\",\n            &[&api_key]\n        ).await\n    {\n        Ok(row) => row,\n        Err(e) => {\n            eprintln!(\"Error querying API key: {:?}\", e);\n            return Err(actix_web::error::ErrorInternalServerError(\"Failed to find API key\"));\n        }\n    };\n\n    // Check if the API key is valid and retrieve the user_id\n    let user_id = match row {\n        Some(row) => row.get::<_, String>(\"user_id\"),\n        None => {\n            eprintln!(\"Error: Invalid or inactive API key\");\n            return Err(actix_web::error::ErrorUnauthorized(\"Invalid or inactive API key\"));\n        }\n    };\n\n    // Attach the user_id to the request\n    let api_info = ApiInfo {\n        api_key: api_key.to_string(),\n        user_id,\n    };\n\n    Ok(api_info)\n}\n"
        }
    ]
}